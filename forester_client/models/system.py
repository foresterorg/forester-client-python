# coding: utf-8

"""
    ImageService API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class System(BaseModel):
    """
    System
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt] = Field(alias="ID")
    name: StrictStr = Field(alias="Name")
    hw_addrs: List[StrictStr] = Field(description="[]string", alias="HwAddrs")
    facts: Dict[str, StrictStr] = Field(description="map<string,string>", alias="Facts")
    acquired: StrictBool = Field(alias="Acquired")
    acquired_at: StrictStr = Field(alias="AcquiredAt")
    image_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ImageID")
    comment: StrictStr = Field(alias="Comment")
    appliance_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ApplianceID")
    appliance: Optional[Dict[str, Any]] = Field(default=None, alias="Appliance")
    uid: Optional[StrictStr] = Field(default=None, alias="UID")
    install_uuid: StrictStr = Field(alias="InstallUUID")
    __properties: ClassVar[List[str]] = ["ID", "Name", "HwAddrs", "Facts", "Acquired", "AcquiredAt", "ImageID", "Comment", "ApplianceID", "Appliance", "UID", "InstallUUID"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of System from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of appliance
        if self.appliance:
            _dict['Appliance'] = self.appliance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of System from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ID": obj.get("ID"),
            "Name": obj.get("Name"),
            "HwAddrs": obj.get("HwAddrs"),
            "Facts": obj.get("Facts"),
            "Acquired": obj.get("Acquired"),
            "AcquiredAt": obj.get("AcquiredAt"),
            "ImageID": obj.get("ImageID"),
            "Comment": obj.get("Comment"),
            "ApplianceID": obj.get("ApplianceID"),
            "Appliance": Appliance.from_dict(obj.get("Appliance")) if obj.get("Appliance") is not None else None,
            "UID": obj.get("UID"),
            "InstallUUID": obj.get("InstallUUID")
        })
        return _obj


